// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Account {
  id                 String  @id @default(cuid())
  userId             String  @unique
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id      String @id @default(cuid())
  sessionToken String   @unique
  userId       String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  username      String @unique
  email         String?   @unique
  surname       String?
  emailVerified DateTime?
  hashedPassword String?
  image         String?
  completedOnboarding Boolean @default(false)
  accounts      Account[]
  sessions      Session[]
  createdWorkspaces Workspace[] @relation("CreatedBy")
  subscriptions Subscription[]
  useCase UseCase?
 
}
 
model VerificationToken {
  identifier String
  token      String @unique
  expires    DateTime

}

enum UserPermission {
  ADMIN
  CAN_EDIT
  READ_ONLY
  OWNER
}

enum UseCase {
  WORK
  STUDY
  PERSONAL_USE
}

enum NotifyType {
  NEW_USER_IN_WORKSPACE
  USER_LEFT_WORKSPACE
  NEW_TASK
  NEW_MIND_MAP
  NEW_ROLE
  NEW_ASSIGNMENT_TASK
  NEW_ASSIGNMENT_MIND_MAP
}

model Workspace {
  id String @id @default(cuid())
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  creatorId String?
  Creator User? @relation("CreatedBy",fields: [creatorId],references: [id],onDelete: Cascade)
  image String?
  subscribers Subscription[]

  @@index([creatorId])
}

model Subscription {
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  userId String
  workspace Workspace @relation(fields: [workspaceId],references: [id],onDelete: Cascade)
  workspaceId String
  userRole UserPermission @default(READ_ONLY)

  @@id([userId,workspaceId])
}